from Math import abs
import something

type MyClass
    def fun_a: () -> ()
    def factorial: Int -> Int

# This class has no state
stateless MyClassStateless
    def SOME_CONSTANT <- 3.5E20

    def constant_func() => 400

type SomeState isa MyClass when z_modified > 2

type OtherState isa MyClass when
    z_modified > 10
    z_modified < 200
    other_field < 50

# This class does have state
stateful MyClassStateful
    def private z_modified
    def private mut other_field <- 10

    def init(self, my_field: Int, z: Int) =>
        self.z_modified <- z * SOME_CONSTANT

    def connect(self: SomeState) => self.other_field <- 200

    def fun_a(self) => print self

    def private fun_b(self) => print "this function is private!"

    def factorial(self, 0) => 1
    def factorial(self, x: Int) => x * self.factorial (x - 1)
    def factorial_infinite(self, x: Int) => x * self.factorial x

    def postfix1(self) => self.a b
    def postfix2(self) => self.a b c
    def postfix3(self) => self.a b c d

    def some_higher_order (self, fun: Int -> Int) => 0
    def fancy(self) => self.some_higher_order(\x => x * 2)
