from Math import abs
import something

class MyGeneric isa String
class MyType(def some_field: String)

type SomeState isa MyClass when self.z_modified > 2
type OtherState isa MyClass when
    self.z_modified  > 10
    self.z_modified  < 200
    self.other_field < 50

type SuperInterface
    def bar: Int

type MyInterface isa SuperInterface
    def required_field: Int
    def higher_order() -> int

# this class has no state
class MyClass(def my_field: Int, other_field: String <- "Hello") isa MyType(other_field), MyInterface
    def required_field: Int <- 100
    def private private_field <- 20

    def fun_a(mut self: SomeState) => self.some_field <- 200 + required_field
    def private fun_b(self) => print "this function is private: {self.private_field}!"

    def some_higher_order(self, fun: Int -> Int) -> Int => fun(self.my_field)
    def higher_order(self) -> Int => self.some_higher_order(\x: Int => x * 2)
