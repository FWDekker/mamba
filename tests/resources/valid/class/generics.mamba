class Err(msg: String) isa Exception(msg)
class Err2(msg: String) isa Exception(msg)

class MyType[A, C]()

class MyClass2[C, A isa MyGeneric] isa MyType[A, C]
    def private z_modified: String <- "asdf"
    def private mut other_field: Int <- 10

    def init(mut self, other_field: Int, z: Int) raises [Err] =>
        if z > 10 then raise Err("Something is wrong!")
        self.z_modified <- "fdsa"

        def mut (a, b) <- (10, 20)
        (a, b) <- (30, 40)

        def something <- match z
            10 => z + 10
            _ => z + 100

        def my_bool <- True
        def other <- match my_bool
            True => 2
            False => 3

        def a <- self.error_function() handle
            err1 =>
                print "hey"
                print "there"
                -1
            err2 =>
                print "hoi"
                -2

        print a

    def error_function(self) -> Int raises [Err, Err2] => 200

    def connect(mut self) => self.other_field <- 200

    def fun_a(self) => print self

    def private fun_b(self) => print "this function is private!"

    def factorial(self, x: Int <- 0) -> Int => x * self.factorial(x - 1)
    def factorial_infinite(self, x: Int) -> Int => x * self.factorial(x)

    def a(self) -> Int=> self.b(10)
    def b(self, c: Int) -> Int => self.a()
    def c(self, d: Int) -> Int => self.b(self.c(20))

    def some_higher_order(self, fun: Int -> Int) -> Int? => 0
    def fancy(self) -> Int => self.some_higher_order(\x: Int => x * 2) ? 10
