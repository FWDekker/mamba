def fun_a() =>
    print 11
    if True and True then print "hello"
    if False or True then print "world"

    def a <- undefined ? if True then 1 else 11

def fun_b(b: Int) => print b

def fun_c(d: (String, Int)) => print d
def fun_d(h: (String, String) -> Int) => h("hello", "world")

def fun_e(m: Int, o: (String, String), r: (Int, (String, String)) -> Int) -> Int => r(m, o)

def fun_v(w: String, y: (String, Bool), ab: (String) -> (String -> Bool)): String -> Bool => ab(w)

class MyClass
    def +(self, other: Int): Int => a + b
    def -(self: Something, other: Int): Something => a - b
    # for now no square root
    def *(self: Something, other: Int): Something => a * b
    def /(self: Something, other: Int): Something => a / b
    def //(self: Something, other: Int): Something => a // b
    def ^(self: Something, other: Int): Something => a ^ b
    def mod(self: Something, other: Int): Something => a mod b
    def =(self: Something, other: Int): Something => a = b
    def >(self: Something, other: Int): Something => a > b
    def <(self: Something, other: Int): Something => a < b

def factorial(x: Int) => x * (factorial (x - 1))

def call_higher_order() => some_higher_order(\x => x * 2)

def fun_with_default(a <- "Some string") => pass
