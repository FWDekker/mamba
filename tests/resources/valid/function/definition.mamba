def fun_a(): Int? =>
    print 11
    if True and True then print "hello"
    if False or True then print "world"

    def a <- undefined ? if True then 1 else 11
    if False then 10 else undefined

def fun_b(b: Int) => print b

def fun_c(d: (String, Int)) => print d
def fun_d(h: (String, String) -> Int): Int? => h("hello", "world")

def fun_e(m: Int, o: (String, String), r: (Int, (String, String)) -> Int): Int => r(m, o)

def fun_v(w: String, y: (String, Bool), ab: (String) -> String -> Bool): String -> Bool => ab(w)

class MyClass(def a: Int, def b: Int)
    def some_function(self, c: Int): Int => c + 20

    def +(self, other: Int): MyClass => MyClass(self.a + self.b + self.some_function(self.a), self.b)
    def -(self, other: Int): MyClass => MyClass(self.a - self.b, self.b)
    def *(self, other: Int): MyClass => MyClass(self.a * self.b, self.b)
    def /(self, other: Int): MyClass => MyClass(self.a / self.b, self.b)
    def //(self, other: Int): MyClass => MyClass(self.a // self.b, self.b)
    def ^(self, other: Int): MyClass => MyClass(self.a ^ self.b, self.b)
    def =(self, other: Int): MyClass => MyClass(self.a = self.b, self.b)
    def >(self, other: Int): MyClass => MyClass(self.a > self.b, self.b)
    def <(self, other: Int): MyClass => MyClass(self.a < self.b, self.b)

    def sqrt(self): MyClass => MyClass(sqrt(self.a), sqrt(self.b))
    def mod(self, other: Int): MyClass => MyClass(self.a mod self.b, self.b)

def factorial(x: Int) => x * factorial(x - 1)

def call_higher_order() => some_higher_order(\x => x * 2)

def fun_with_default(a <- "Some string") => pass
