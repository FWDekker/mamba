def fun_a() -> Int? =>
    print 11
    if True and True then print "hello"
    if False or True then print "world"

    def a <- undefined ? if True then 1 else 11
    undefined

def fun_b(b: Int) => print b

def fun_c(d: (String, Int)) => print d
def fun_d(h: (String, String) -> Int) -> Int? => h("hello", "world")

def fun_e(m: Int, o: (String, String), r: (Int, (String, String)) -> Int) -> Int => r(m, o)

def fun_v(y: String, ab: String -> String -> Bool) -> String -> Bool => ab(y)

class MyClass(def a: Int, def b: Int)
    def some_function(self, c: Int) -> Int =>
        def mut d <- 20
        d <- 10 + 30
        c + 20

    def +(self, other: MyClass) -> MyClass => MyClass(self.a + self.b + other.some_function(self.a), self.b)
    def -(self, other: MyClass) -> MyClass => self + other
    def *(self, other: MyClass) -> MyClass => MyClass(self.a * other.b, self.b)
    def /(self, other: MyClass) -> MyClass => MyClass(self.a // other.b, self.b)
    def //(self, other: MyClass) -> MyClass => MyClass(self.a // other.b, self.b)
    def ^(self, other: MyClass) -> MyClass => MyClass(self.a ^ other.b, self.b)

    def =(self, other: MyClass) -> Bool => self.a = other.b
    def >(self, other: MyClass) -> Bool => self.a > other.b
    def <(self, other: MyClass) -> Bool => self.a < other.b

    def sqrt(self) -> MyClass => MyClass(self.a // self.b, self.a // self.b)
    def mod(self, other: MyClass) -> MyClass => MyClass(self.a mod self.b, self.b)

def factorial(x: Int) -> Int => x * factorial(x - 1)

def some_higher_order(f: (Int) -> Int, x: Int) -> Int => f(x)
